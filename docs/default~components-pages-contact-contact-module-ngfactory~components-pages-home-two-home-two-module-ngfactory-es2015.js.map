{"version":3,"sources":["./src/app/components/models/contact/contact.ts","./src/app/components/shared/fab-button/fab-button.component.html","./node_modules/ng-recaptcha/fesm2015/ng-recaptcha.js","./src/app/components/shared/fab-button/fab-button.component.ts","./src/app/components/helper/contact/contact-helper.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAO,MAAM,OAAO;CAQnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wGCRD,+IAQQ,KAPJ,wKAMQ,KALJ,gJAIO,KAHH,+KAEI,KADA,0JAAwC,wDADzC,mBAAoB,cAAvB,YAEI,EAFD,SAAoB;;;;;;;;;;;;;;;;ACHnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkN;AAC9J;AACA;AACY;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,UAAU,WAAW,4BAA4B,UAAU;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB,+BAA+B,4DAAc;AAC7C,+BAA+B,4DAAc;AAC7C,4BAA4B,4DAAc;AAC1C,+BAA+B,4DAAc;AAC7C,kCAAkC,4DAAc;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yEAAiB;AACtC;AACA,cAAc,+CAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAiB;AAC7B,gCAAgC,oDAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA,KAAK,6BAA6B,OAAO,oDAAM,SAAS,yDAAW,IAAI,GAAG;AAC1E,KAAK,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,+BAA+B,GAAG;AACrG,KAAK,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,+BAA+B,GAAG;AACrG,KAAK,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,4BAA4B,GAAG;AAClG,KAAK,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,kCAAkC;AACrG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,+BAA+B;AACpC,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,+BAA+B;AACrG;AACA;AACA,UAAU,OAAO,mDAAK,EAAE,GAAG,OAAO,yDAAW,sBAAsB;AACnE,eAAe,OAAO,mDAAK,EAAE;AAC7B,aAAa,OAAO,mDAAK,EAAE;AAC3B,YAAY,OAAO,mDAAK,EAAE;AAC1B,YAAY,OAAO,mDAAK,EAAE;AAC1B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,aAAa,OAAO,mDAAK,EAAE;AAC3B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,gBAAgB,OAAO,oDAAM,EAAE;AAC/B,aAAa,OAAO,oDAAM,EAAE;AAC5B;;AAEA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4CAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA,wDAAwD,gBAAgB;AACxE;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,6BAA6B,OAAO,oDAAM,kCAAkC,GAAG;AACpF,KAAK,6BAA6B,OAAO,oDAAM,SAAS,yDAAW,IAAI,GAAG;AAC1E,KAAK,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,+BAA+B,GAAG;AACrG,KAAK,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,4BAA4B,GAAG;AAClG,KAAK,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,+BAA+B;AAClG;;AAEA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,iCAAiC,gEAAiB;AAClD,qCAAqC,gEAAU;AAC/C,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,OAAO,0DAAY,mCAAmC;AACvE;;AAEA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,0BAA0B,0DAAW;AACrC,aAAa;AACb;;AAEA;AACA;AACA;;AAEsS;AACtS;;;;;;;;;;;;;ACzZA;AAAA;AAAO,MAAM,kBAAkB;IAI7B,YAAoB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAFpD,gBAAW,GAAG,EAAE,CAAC;IAEuC,CAAC;IAEzD,QAAQ;QACN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;IAC3D,CAAC;CAEF;;;;;;;;;;;;;ACjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI8B;AACI;AACU;AAEe;;;AAOpD,MAAM,oBAAoB;IAQ/B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAPpC,cAAS,GAAG,GAAG,wEAAW,CAAC,GAAG,YAAY,CAAC;QAG3C,gBAAW,GAAG;YACZ,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;SACjE,CAAC;IAEqC,CAAC;IAExC,WAAW,CAAC,QAAiB;QAC3B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CAAU,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC;aACzD,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,cAAc,CAAC,QAAqB;QAClC,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CAAkB,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC;aACjE,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAEO,WAAW,CAAC,KAAwB;QAC1C,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,kEAAkE;YAElE,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1D;aAAM;YACL,sDAAsD;YAEtD,6DAA6D;YAE7D,OAAO,CAAC,KAAK,CACX,yBAAyB,KAAK,CAAC,MAAM,IAAI,GAAG,aAAa,KAAK,CAAC,KAAK,EAAE,CACvE,CAAC;SACH;QAED,wDAAwD;QAExD,IAAI,CAAC,SAAS,GAAG;YACf,UAAU,EAAE,iBAAiB;YAC7B,SAAS,EAAE,6DAA6D;SACzE,CAAC;QACF,OAAO,uDAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC","file":"default~components-pages-contact-contact-module-ngfactory~components-pages-home-two-home-two-module-ngfactory-es2015.js","sourcesContent":["export class Contact {\r\n    id: number | undefined;\r\n    name: string | undefined;\r\n    email: string | undefined;\r\n    phone?: string | undefined;\r\n    subject: string | undefined;\r\n    message: string | undefined;\r\n    recaptcha?: string | undefined;\r\n}\r\n","<div class=\"fab-wrapper\">\n    <label class=\"fab-button\" for=\"fabCheckbox\">\n        <span class=\"fab-content\">\n            <a [href]=\"whatsAppUrl\" target=\"_blank\" class=\"fab-content\">\n                <i class=\"fab fa-whatsapp icon-fab\"></i>\n            </a>\n        </span>\n    </label>\n  </div>","import { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, EventEmitter, Component, ElementRef, NgZone, Input, HostBinding, Output, NgModule, Directive, forwardRef, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement(\"script\");\n    script.innerHTML = \"\";\n    const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nconst loader = { loadScript };\n\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\n\nclass RecaptchaLoaderService {\n    constructor(\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, language, baseUrl, nonce, v3SiteKey) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.v3SiteKey = v3SiteKey;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId)\n            ? RecaptchaLoaderService.ready.asObservable()\n            : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService.ready = subject;\n            const langParam = this.language ? \"&hl=\" + this.language : \"\";\n            const renderMode = this.v3SiteKey || \"explicit\";\n            loader.loadScript(renderMode, (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n}\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService.decorators = [\n    { type: Injectable }\n];\nRecaptchaLoaderService.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_LANGUAGE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_BASE_URL,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_NONCE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_V3_SITE_KEY,] }] }\n];\n\nlet nextId = 0;\nclass RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.errorMode = \"default\";\n        this.resolved = new EventEmitter();\n        // The rename will happen a bit later\n        // eslint-disable-next-line @angular-eslint/no-output-native\n        this.error = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== \"invisible\") {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    errored(args) {\n        this.error.emit(args);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        // This `any` can be removed after @types/grecaptcha get updated\n        const renderOptions = {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            \"expired-callback\": () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        };\n        if (this.errorMode === \"handled\") {\n            renderOptions[\"error-callback\"] = (...args) => {\n                this.zone.run(() => this.errored(args));\n            };\n        }\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n}\nRecaptchaComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: \"reCaptcha\",\n                selector: \"re-captcha\",\n                template: ``\n            },] }\n];\nRecaptchaComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: RecaptchaLoaderService },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_SETTINGS,] }] }\n];\nRecaptchaComponent.propDecorators = {\n    id: [{ type: Input }, { type: HostBinding, args: [\"attr.id\",] }],\n    siteKey: [{ type: Input }],\n    theme: [{ type: Input }],\n    type: [{ type: Input }],\n    size: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    badge: [{ type: Input }],\n    errorMode: [{ type: Input }],\n    resolved: [{ type: Output }],\n    error: [{ type: Output }]\n};\n\nclass RecaptchaCommonModule {\n}\nRecaptchaCommonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [RecaptchaComponent],\n                exports: [RecaptchaComponent],\n            },] }\n];\n\nclass RecaptchaModule {\n}\nRecaptchaModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [RecaptchaComponent],\n                imports: [RecaptchaCommonModule],\n                providers: [RecaptchaLoaderService],\n            },] }\n];\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nclass ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, baseUrl, nonce, language) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    get onExecuteError() {\n        if (!this.onExecuteErrorSubject) {\n            this.onExecuteErrorSubject = new Subject();\n            this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n        }\n        return this.onExecuteErrorObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const onError = (error) => {\n            this.zone.run(() => {\n                subject.error(error);\n                if (this.onExecuteErrorSubject) {\n                    // We don't know any better at this point, unfortunately, so have to resort to `any`\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    this.onExecuteErrorSubject.next({ action, error });\n                }\n            });\n        };\n        this.zone.runOutsideAngular(() => {\n            try {\n                this.grecaptcha\n                    .execute(this.siteKey, { action })\n                    .then((token) => {\n                    this.zone.run(() => {\n                        subject.next(token);\n                        subject.complete();\n                        if (this.onExecuteSubject) {\n                            this.onExecuteSubject.next({ action, token });\n                        }\n                    });\n                }, onError);\n            }\n            catch (e) {\n                onError(e);\n            }\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if (\"grecaptcha\" in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                const langParam = this.language ? \"&hl=\" + this.language : \"\";\n                loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n            }\n        }\n    }\n}\nReCaptchaV3Service.decorators = [\n    { type: Injectable }\n];\nReCaptchaV3Service.ctorParameters = () => [\n    { type: NgZone },\n    { type: String, decorators: [{ type: Inject, args: [RECAPTCHA_V3_SITE_KEY,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_BASE_URL,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_NONCE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_LANGUAGE,] }] }\n];\n\nclass RecaptchaV3Module {\n}\nRecaptchaV3Module.decorators = [\n    { type: NgModule, args: [{\n                providers: [ReCaptchaV3Service],\n            },] }\n];\n\nclass RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n}\nRecaptchaValueAccessorDirective.decorators = [\n    { type: Directive, args: [{\n                providers: [\n                    {\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n                    },\n                ],\n                selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\",\n            },] }\n];\nRecaptchaValueAccessorDirective.ctorParameters = () => [\n    { type: RecaptchaComponent }\n];\nRecaptchaValueAccessorDirective.propDecorators = {\n    onResolve: [{ type: HostListener, args: [\"resolved\", [\"$event\"],] }]\n};\n\nclass RecaptchaFormsModule {\n}\nRecaptchaFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [RecaptchaValueAccessorDirective],\n                exports: [RecaptchaValueAccessorDirective],\n                imports: [FormsModule, RecaptchaCommonModule],\n            },] }\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa };\n//# sourceMappingURL=ng-recaptcha.js.map\n","import { Component, OnInit } from '@angular/core';\nimport { WhatsappService } from '../../helper/whatsapp.service';\n\n@Component({\n  selector: 'app-fab-button',\n  templateUrl: './fab-button.component.html',\n  styleUrls: ['./fab-button.component.css']\n})\nexport class FabButtonComponent implements OnInit {\n\n  whatsAppUrl = '';\n\n  constructor(private whatsAppService: WhatsappService) { }\n\n  ngOnInit(): void {\n    this.whatsAppUrl = this.whatsAppService.getWhatsAppUrl();\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpErrorResponse,\r\n  HttpHeaders,\r\n} from \"@angular/common/http\";\r\nimport { throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { Contact } from \"../../models/contact/contact\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { ContactForm } from \"../../models/contact/ContactForm\";\r\nimport { ContactResponse } from \"../../models/contact/ContactResponse\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ContactHelperService {\r\n  ServerUrl = `${environment.url}send-email`;\r\n  errorData: {} | undefined;\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  contactForm(formdata: Contact) {\r\n    return this.http\r\n      .post<Contact>(this.ServerUrl, formdata, this.httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  contactFormNew(formdata: ContactForm) {\r\n    return this.http\r\n      .post<ContactResponse>(this.ServerUrl, formdata, this.httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n\r\n      console.error(\"An error occurred:\", error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n\r\n      // The response body may contain clues as to what went wrong.\r\n\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` + `body was: ${error.error}`\r\n      );\r\n    }\r\n\r\n    // return an observable with a user-facing error message\r\n\r\n    this.errorData = {\r\n      errorTitle: \"Request Fallida\",\r\n      errorDesc: \"Algo malo sucedió. Por favor, inténtelo de nuevo más tarde.\",\r\n    };\r\n    return throwError(this.errorData);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}